<script language="javascript" type="text/javascript"> 

var gCommit = new Boolean(false);
var gContractCreated = new Boolean(false);
var gRecordTypePrompt = new Boolean(false);
var gDebug = false;

var gCurrentStatusCategory = "{!APTS_Agreement__c.Status_Category__c}";
var gTargetStatusCategoryField = "Apttus__Status_Category__c";
var gTargetStatusCategoryAuto = "In Signatures";
var gTargetStatusCategoryManual = gCurrentStatusCategory;

var gCurrentStatus = "{!APTS_Agreement__c.Status__c}";
var gTargetStatusField = "Apttus__Status__c";
var gTargetStatusAuto = "Other Party Signatures";
var gTargetStatusManual = "Submitted Request";

var gSubmitRequestMode = "Manual";
var gAssignedQueueName = "";

var cFILENAME_SUFFIX = "_Original";
var cCREATE_FINAL_AGREEMENT = "Generating agreement...Please wait";
var cSAVING_FINAL_AGREEMENT = "Saving agreement...Please wait";
var cERROR_CREATE_FINAL_AGREEMENT = "ERROR generating agreement:";
var cERROR_SAVING_FINAL_AGREEMENT = "ERROR saving agreement:";
var cERROR_ACTIVATE_CONTRACT = "ERROR activating agreement:";
var cERROR_ASSIGN_TO_QUEUE = "ERROR assigning agreement to queue";
var cERROR_SELECT_TEMPLATE = "ERROR selecting agreement template";
var cERROR_UPDATE_STATUS = "ERROR updating agreement status:";
var cERROR_UPDATE_REQUEST_DATE = "ERROR updating request date:";
var cERROR_UPDATE_STATUS = "ERROR updating agreement status:";

var gSaveProgressMsg = cSAVING_FINAL_AGREEMENT;
var gSaveErrorMsg = cERROR_SAVING_FINAL_AGREEMENT;

var cNEW_AGREEMENT = "Creating new agreement...Please Wait";
var cERROR_NEW_AGREEMENT = "ERROR creating new agreement:";
var cAGREEMENT_NUMBER_FIELD = "Apttus__Contract_Number__c";

var cERROR_CLONE_OBJECT = "ERROR cloning object:";
var cERROR_CLONE_ATTACHMENT = "ERROR cloning attachment:";
var cERROR_CLONE_DOCUMENT = "ERROR cloning document:";
var cCOPY_OPEN_ACTIVITIES = new Boolean(false);
var cCOPY_ACTIVITY_HISTORY = new Boolean(false);
var cCOPY_RELATED_AGREEMENTS = new Boolean(false);
var cWORKFLOW_TRIGGER_FIELD_PREFIX = "Workflow_Trigger";
var cWORKFLOW_TRIGGER_CREATED_FROM_CLONE = "Apttus__Workflow_Trigger_Created_From_Clone__c";
var cTEMPLATE_TYPE_AGREEMENT = "Agreement";

//For Merge server
//For PreprocessAttachment
var gSessionId = "{!API.Session_ID}";
var gServerUrl = "{!API.Enterprise_Server_URL_120}";
var gObjType = "";
var gObjId = "";
var gTemplateType = cTEMPLATE_TYPE_AGREEMENT;
var gTemplateId = "";
var gAdminType = gAdminObjName;
var gDocPassword = "";
var gIsDraft = new Boolean(true);
var gXmlRequestInputValue = "";
var gMergeServerURL = "http://208.109.154.224:1000/cgi-bin/MergeServer/Bin/MMCGI.exe";
var gUseMergeServer = false;
var gfilenameMergeServer="";
var dAttachRequired=true;
var gActionName="StoreId";
var cUSE_MERGE_SERVER = "APTS_UseWizardServer";

function newAgreement() {
	gContractId = "";
	gCommitTransaction = false;
	
	try {
		//create new agreement in salesforce
		var sObj = new sforce.SObject(gAgreementObjName);
		if (gHasRecordTypes==true) {
			var selectDefaultRecordType = false;
			
			//try to get recordtype id from standard recordtype selection page
			var recTypeId = "{!$Request.RecordType}";
			if (recTypeId=="" || recTypeId==null) {
				try {
					//try to get recordtype id from custom recordtype selection page
					recTypeId = document.getElementById("recordTypeId").value;
				}
				catch(ex) {
					selectDefaultRecordType = true;
				}
			}
			
			//get recordtype name from the id
			var recTypeDesc = "";
			if ((recTypeId=="" || recTypeId==null) && selectDefaultRecordType==true) {
				recTypeDesc = getRecordTypeDefault();
			} else {
				recTypeDesc = getRecordTypeDescription(recTypeId);
			}

			sObj.RecordTypeId = recTypeId;
			sObj.Name = recTypeDesc;
			
		} else {
			sObj.Name = "Enter Name:";
		}
		
		//create new agreement in salesforce
		var result = sforce.connection.create([sObj]);
		if (result[0].getBoolean("success")) {
			gContractCreated = true;
			gContractId = result[0].id;

			var ids = new Array(1);
			ids[0] = gContractId;
			
			//get agreement fields
			var flds = "Id,"+cAGREEMENT_NUMBER_FIELD;
			var result = sforce.connection.retrieve(flds,gAgreementObjName,ids);
			if (result[0]==null) {
				erroralert(cERROR_NEW_AGREEMENT,result);
			} else {
			    //get the autogenerated agreement number
			    var sysGenNumber = result[0].Apttus__Contract_Number__c;
			    
			    sObj = new sforce.SObject(gAgreementObjName);
			    sObj.Id = gContractId;
			    sObj.Apttus__Agreement_Number__c = sysGenNumber;
	    	    
				//update the agreement number
				var result = sforce.connection.update([sObj]);
				if (result[0].getBoolean("success")) {
					gCommitTransaction = true;
				} else {
					erroralert(cERROR_NEW_AGREEMENT,result[0]);
				}
			}
		} else {
			erroralert(cERROR_NEW_AGREEMENT,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_NEW_AGREEMENT,ex);
	}
	finally {
		if (gCommitTransaction==true) {
			commit();
		} else {
			rollback();
		}
	}
}

function editAgreement(id) {
	navigateTo("/" + id + "/e?retURL=%2F" + id);
}
 
function viewAgreement(id) {
	navigateTo("/" + id);
}
 
/**
	TODO: implement transaction in Apex
	
	the problem is if the user hits cancel in the edit screen
	the agreement should NOT be created.  However since we've
	already created it from the api, we need to DELETE it but
	we can't because we can't override the CANCEL button !!!
	Only way to do this the right way as a real transaction
	is to do it using Apex server side scripting logic...
*/
function commit() {
	try {
	}
	catch(ex) {
		error(cERROR_NEW_AGREEMENT,ex);
	}
	finally {
		doCommit(gContractId);
	}
}

function rollback() {
	try {
		if (gContractCreated==true) {
			var ids = new Array(1);
			ids[0] = gContractId;
			
			var result = sforce.connection.deleteIds([ids]);
			if (! result[0].getBoolean("success")) {
				erroralert(cERROR_NEW_AGREEMENT,result[0]);
			}
		}
	}
	catch(ex) {
		erroralert(cERROR_NEW_AGREEMENT,ex);
	}
	finally {
		doRollback(gContractId);
	}
}

function cloneObject(object,id) {
	var cloneId = "";
	try {
		//get info about the current user before we logon as superuser
		gCurrUserInfo = sforce.connection.getUserInfo();

		//make sure we have the right permissions
		logonAsSuperUser();
		
		//build list of fields
		var dso = sforce.connection.describeSObject(object);
		var fieldList = getFieldList(object);
		if (gDebug) writeDebugLn("<br>object="+object+"<br>id="+id+"<br>fieldList="+fieldList);

		//get field values
		var result = sforce.connection.retrieve(fieldList,object,[id]);
		if (gDebug) writeDebugLn("<br>retrieve:<br>result[0]="+result[0]);
		if (result[0]==null) {
			erroralert(cERROR_CLONE_OBJECT,result);
			return;
		}
		
		//clone object and copy field values
  		var clone = new sforce.SObject(object);
	    for (var i=0; i<dso.fields.length; i++) {
	        var field = dso.fields[i];
	        var fieldName = field.name;

			if (field.createable=="true" && field.unique=="false") {
				clone.set(fieldName, result[0].get(fieldName));
				
		        //set created from clone workflow trigger so workflow rule know
		        //not to fire rules after creating a clone but clear all others
		        if (field.custom=="true" && field.type=="boolean" &&
		        	contains(fieldName,cWORKFLOW_TRIGGER_FIELD_PREFIX))
		        {
			        clone.set(fieldName,"false");
			        if (fieldName==cWORKFLOW_TRIGGER_CREATED_FROM_CLONE) {
			        	clone.set(fieldName,"true");
			        }
		        }
			}
	    }
	    if (gDebug) writeDebugLn("<br>clone="+clone);
				
		//explicitly set the owner to the person who is cloning this object
		clone.OwnerId = gCurrUserInfo.userId;
 		
		//create the clone
 		result = sforce.connection.create([clone]);
		if (gDebug) writeDebugLn("<br>create:<br>result[0]="+result[0]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_CLONE_OBJECT,result[0]);
			return;
		}
		
		//get the id for the clone we just created
 		cloneId = result[0].id;
 		if (gDebug) writeDebugLn("<br>cloneId="+cloneId);
		
	    //clone related objects
	    if (gDebug) writeDebugLn("<br><br>cloning child objects...");
	    var canHaveAttachments = new Boolean(false);
	    for (var i=0; i<dso.childRelationships.length; i++) {
	        var child = dso.childRelationships[i];
	        var childSObject = child.childSObject;
	        var childField = child.field;
	        if (childSObject == "Attachment") {
	        	canHaveAttachments = new Boolean(true);
	        }
	        if (gDebug) writeDebugLn("<br>childSObject="+childSObject+"<br>childField="+childField);
	        
			var childDso = sforce.connection.describeSObject(childSObject);
			if (childDso.createable == "true" && childSObject != "Attachment") {
			    var childFieldList = getFieldList(childSObject);
			    
			    //get primary key name
	    		var pkf = "";
	    		for (var p=0; p<childDso.fields.length; p++) {
	    			var cf = childDso.fields[p];
	    			if (cf.nameField=="true") {
	    				pkf = cf.name;
	    				break;
	    			}
	    		}
			    
				var q = "select " + childFieldList + " from " + childSObject + 
					   " where " + childField + " = '" + id + "'";
				
				//sort child records by primary key
				if (pkf!="") {
					q += " order by " + pkf;
				}
					   
				var qresult = sforce.connection.query(q);
				var qrecords = qresult.getArray("records");
				for (j=0; j<qrecords.length; j++) {
					var record = qrecords[j];
		            
			  		var childClone = new sforce.SObject(childSObject);
				    for (var k=0; k<childDso.fields.length; k++) {
				        var cfield = childDso.fields[k];
				        var cfieldName = cfield.name;
						if (cfield.createable=="true" && field.unique=="false") {
							childClone.set(cfieldName, record.get(cfieldName));
						}
				    }
				    childClone.set(childField, cloneId);
				    
					var copy = new Boolean(true);
					if (childSObject == "Task") {
						var status = childClone.Status;
						if (status == "Completed") {
							copy = cCOPY_ACTIVITY_HISTORY;
						} else {
							copy = cCOPY_OPEN_ACTIVITIES;
						}
					} else if (childSObject == "Apttus__APTS_Related_Agreement__c") {
						copy = cCOPY_RELATED_AGREEMENTS;
					} else if (childSObject == "Apttus__APTS_Agreement__Share") {
						copy = false;
                    } else if (childSObject == "Apttus__APTS_Template__Share") {
                        copy = false;
					}

					if (copy == true) {
						var cresult = sforce.connection.create([childClone]);
						if (!cresult[0].getBoolean("success")) {
							erroralert(cERROR_CLONE_OBJECT,cresult[0]);
							return;
						}
					}
				}
			}
	    }
	    
	    //clone attachments
	    if (canHaveAttachments) {
	    	getWizardMode();
	    	cloneAttachments(object,id,cloneId);
	    	gObjId=cloneId;
	    	gObjType=object;	    	
	    	if (gUseMergeServer){
	    		gProtectionLevel = getProtectionLevel();
				gfilenameMergeServer="";
				doMakeFormRequestForMergeServer();
				buildMergeServerPage();
	    		document.msPage.submit();
	    	}
	    }
	}
	catch(ex) {
		erroralert(cERROR_CLONE_OBJECT,ex);
	}
	finally {
		return cloneId;
	}
}

/**
	clients should provide an implementation for this method to perform special processing
	on attachments before copying them in base64 binary format to Salesforce. for example,
	word document attachments for agreement and template objects should have the object id
	of the cloned Salesforce object saved in the document properties so the Author tool
	will know what agreement or template object owns the document in Salesforce...
*/
function preprocessAttachment(sObj,sObjType,sObjId) {
	if (gDebug) writeDebugLn("<br><br>preprocessAttachment:<br>sObjType="+sObjType+"<br>sObjId="+sObjId);
	var body = sObj.Body;
	
	try {
		/*initWizardSilent();
		if (gMMObjInstalled) {
			var fnExt = getFileNameExtension(sObj.Name);	
			if ((fnExt.toLowerCase()=="doc" || fnExt.toLowerCase()=="docx")) {
				var fnPath = gMMObj.GetTempFilePath(sObj.Name)
				if (gDebug) writeDebugLn("<br>sObjType="+sObjType+"<br>sObjId="+sObjId+"<br>sObj="+sObj+"<br>fnPath="+fnPath);
				
				var dBody = gMMObj.Base64Decode(fnPath,sObj.Body);
				var ok = gMMObj.StoreId(fnPath,sObjType,sObjId);
				var eBody = gMMObj.Base64Encode(fnPath);
				
				gMMObj.DeleteFile(fnPath);
				body = eBody;
			}
		}*/
	}
	catch(ex) {
		/*erroralert(cERROR_CLONE_ATTACHMENT,ex);
		
		if (gMMObjInstalled) {
			gMMObj.DeleteFile(fnPath);
		}*/
	}
	finally {
		return body;
	}
}

function cloneAttachments(sObjType,fromObjId,toObjId) {
	if (gDebug) writeDebugLn("<br><br>cloneAttachments:<br>fromObjId="+fromObjId+"<br>toObjId="+toObjId);
	try {
		//get attachment object fields
		var dso = sforce.connection.describeSObject("Attachment");
	    var fieldList = getFieldList("Attachment");

		//get attachment ids owned by this parent since can't retrieve all bodies at once
		var q = "select Id,Name from Attachment where ParentId = '" + fromObjId + "'";	
		var result = sforce.connection.query(q);
		var records = result.getArray("records");
		
		for (j=0; j<records.length; j++) {
			var record = records[j];
			if (gDebug) writeDebugLn("<br>record="+record);
			
			//retrieve all attachment fields
			result = sforce.connection.retrieve(fieldList, "Attachment", [record.Id]);
			if (result[0]==null) {
				erroralert(cERROR_CLONE_ATTACHMENT,result);
				return;
			}
			if (gDebug) writeDebugLn("<br>result[0]="+result[0]);

	  		//create attachment copy
	  		var attObj = new sforce.SObject("Attachment");
		    var sObj = result[0];
		    for (var k=0; k<dso.fields.length; k++) {
		        var field = dso.fields[k];
		        var fldname = field.name;
				if (field.createable == "true") {
					var fldval = sObj.get(fldname);
					if (gDebug) writeDebugLn("<br>"+fldname+"="+fldval);
					if (fldname=="Body") {
						fldval = preprocessAttachment(sObj,sObjType,toObjId);
					}
					attObj.set(fldname, fldval);
				}
		    }
		    
		    //change attachment parent
		    attObj.ParentId = toObjId;
			attObj.OwnerId = gCurrUserInfo.userId;
		    
		 	//save new copy of attachment object to salesforce
		 	result = sforce.connection.create([attObj]);
			if (!result[0].getBoolean("success")) {
				erroralert(cERROR_CLONE_ATTACHMENT,result[0]);
				return;
			}
		}
	}
	catch(ex) {
		erroralert(cERROR_CLONE_ATTACHMENT,ex);
	}
}

function cloneAttachment(fromAttachmentId,toObjectId) {
	try {
		//get attachment object fields
		if (gDebug) writeDebugLn("<br>fromAttachmentId="+fromAttachmentId+"<br>toObjectId="+toObjectId);
		var dso = sforce.connection.describeSObject("Attachment");
	    var fieldList = getFieldList("Attachment");

		//retrieve attachment fields
		result = sforce.connection.retrieve(fieldList,"Attachment",[fromAttachmentId]);
		if (result[0]==null) {
			if (gDebug) writeDebugLn("<br>result="+result[0]);
			erroralert(cERROR_CLONE_ATTACHMENT,result);
			return;
		}

  		//create copy
  		if (gDebug) writeDebugLn("<br>creating attachment object...");
  		var attObj = new sforce.SObject("Attachment");
	    var sObj = result[0];
	    for (var k=0; k<dso.fields.length; k++) {
	        var field = dso.fields[k];
	        var fldname = field.name;
			if (field.createable=="true") {
				if (gDebug) writeDebugLn("<br>setting attachment field "+fldname);
				var fldval = sObj.get(fldname);
				attObj.set(fldname, fldval);
			}
	    }
	    
	    //change parent
	    attObj.ParentId = toObjectId;
	    if (gDebug) writeDebugLn("<br>attObj="+attObj);
	    
	 	//save copy to salesforce
	 	if (gDebug) writeDebugLn("<br>creating attachment in salesforce...");
	 	result = sforce.connection.create([attObj]);
		if (gDebug) writeDebugLn("<br>result="+result[0]);
		if (!result[0].getBoolean("success")) {
			alert(result[0]);
			return;
		}
	}
	catch(ex) {
		erroralert(cERROR_CLONE_ATTACHMENT,ex);	
	}
}

function cloneDocument(fromDocumentId,toObjectId) {
	try {
		//get document object fields
		var dso = sforce.connection.describeSObject("Document");
	    var fieldList = getFieldList("Document");

		//retrieve attachment fields
		result = sforce.connection.retrieve(fieldList,"Document",[fromDocumentId]);
		if (result[0]==null) {
			erroralert(cERROR_CLONE_DOCUMENT,result);
			return;
		}

  		//create copy
  		var docObj = new sforce.SObject("Document");
	    var sObj = result[0];
	    for (var k=0; k<dso.fields.length; k++) {
	        var field = dso.fields[k];
	        var fldname = field.name;
			if (field.createable=="true") {
				var fldval = sObj.get(fldname);
				docObj.set(fldname, fldval);
			}
	    }
	    
	 	//save copy to salesforce
	 	result = sforce.connection.create([docObj]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_CLONE_DOCUMENT,result[0]);
			return;
		}
	}
	catch(ex) {
		erroralert(cERROR_CLONE_DOCUMENT,ex);	
	}
}

function preMerge() {
	if (gDebug) { writeDebugLn("<p>preMerge:"); }
}

function postMerge() {
	if (gDebug) { writeDebugLn("<p>postMerge:"); }
	
	if (gAttachmentName==null || gAttachmentName=="") {
		throw(cERROR_CREATE_FINAL_AGREEMENT);
	}
	
	showMsgProgress(cSAVING_FINAL_AGREEMENT);

	if (gOutputFormat==cFORMAT_DOC) {
		window.setTimeout("doSaveAttachment();",gTimeout);
	} else if (gOutputFormat==cFORMAT_RTF) {
		window.setTimeout("doSaveAsRTF();",gTimeout);
	} else if (gOutputFormat==cFORMAT_PDF) {
		window.setTimeout("doSaveAsPDF();",gTimeout);
	} else if (gOutputFormat==cFORMAT_XML) {
		window.setTimeout("doSaveAsXML();",gTimeout);
	} else {
		window.setTimeout("doSaveAttachment();",gTimeout);
	}
}

function doSaveAttachment() {
	if (gDebug) { writeDebugLn("<p>doSaveAttachment:"); }
	try {
		gAttachmentBody = gMMObj.Base64Encode(gAttachmentName);

		var fnPre = getFileNamePrefix(gAttachmentName);
		var fnExt = getFileNameExtension(gAttachmentName);
		
		var fn = fnPre + cFILENAME_SUFFIX + "." + fnExt;

		createAttachment(gObjectId,"{!User.Id}",fn);
	}
	catch(ex) {
		erroralert(gSaveErrorMsg,ex);
	}
}

function doSaveAsRTF() {
	if (gDebug) { writeDebugLn("<p>doSaveAsRTF:"); }
	try {
		var fnPath = getFilePath(gAttachmentName);
		var fnPre = getFileNamePrefix(gAttachmentName);
		var fnExt = "rtf";
		var fnRTF = fnPath + fnPre + cFILENAME_SUFFIX + "." + fnExt;

		var savedOK = gMMObj.SaveAsRTF(gAttachmentName,fnRTF);
		if (savedOK) {
			gAttachmentBody = gMMObj.Base64Encode(fnRTF);
			
			var fn = getFileNameFromPath(fnRTF);
			createAttachment(gObjectId,"{!User.Id}",fn);
		}
	}
	catch(ex) {
		erroralert(gSaveErrorMsg,ex);
	}
}

function doSaveAsPDF() {
	if (gDebug) { writeDebugLn("<p>doSaveAsPDF:"); }
	try {
		var fnPath = getFilePath(gAttachmentName);
		var fnPre = getFileNamePrefix(gAttachmentName);
		var fnExt = "pdf";
		var fnPDF = fnPath + fnPre + cFILENAME_SUFFIX + "." + fnExt;

		var savedOK = gMMObj.SaveAsPDF(gAttachmentName,fnPDF);
		if (savedOK) {
			gAttachmentBody = gMMObj.Base64Encode(fnPDF);
			
			var fn = getFileNameFromPath(fnPDF);
			createAttachment(gObjectId,"{!User.Id}",fn);
		}
	}
	catch(ex) {
		erroralert(gSaveErrorMsg,ex);
	}
}

function doSaveAsXML() {
	if (gDebug) { writeDebugLn("<p>doSaveAsXML:"); }
	try {
		var fnPath = getFilePath(gAttachmentName);
		var fnPre = getFileNamePrefix(gAttachmentName);
		var fnExt = "xml";
		var fnXML = fnPath + fnPre + cFILENAME_SUFFIX + "." + fnExt;

		var savedOK = gMMObj.SaveAsXML(gAttachmentName,fnXML);
		if (savedOK) {
			gAttachmentBody = gMMObj.Base64Encode(fnXML);
			
			var fn = getFileNameFromPath(fnXML);
			createAttachment(gObjectId,"{!User.Id}",fn);
		}
	}
	catch(ex) {
		erroralert(gSaveErrorMsg,ex);
	}
}

function createAttachment(parentId,ownerId,name) {
	if (gDebug) { writeDebugLn("<p>createAttachment:"); }
	try {	
		var attachment = new sforce.SObject("Attachment");
		
	    attachment.ParentId = parentId;
	    attachment.OwnerId = ownerId;
	    attachment.Name = name;
	    attachment.Body = gAttachmentBody;
	    
		showMsgProgress(gSaveProgressMsg);
		
		if (gUseAsyncMode) {
			var result = sforce.connection.create([attachment],
				{ onSuccess : createAttachmentSuccess,
				  onFailure : createAttachmentFailure }
				);
		} else {
			var result = sforce.connection.create([attachment]);
			if (result[0].getBoolean("success")) {
				createAttachmentSuccess("");
			} else {
				erroralert(gSaveErrorMsg,result[0]);
			}
		}
	}
	catch(ex) {
	    erroralert(gSaveErrorMsg,ex);
	    navigateTo(gObjectIdURL);
	}
}

function createAttachmentSuccess(result) {
	if (gDebug) { writeDebugLn("<p>createAttachmentSuccess:"); }
	autoUpdateStatusCategory();

	gMMObj = null;
	navigateTo(gObjectIdURL);
}

function createAttachmentFailure(error) {
	if (gDebug) { writeDebugLn("<p>createAttachmentFailure:"); }
	erroralert(gSaveErrorMsg,error);

	gMMObj = null;
	navigateTo(gObjectIdURL);
}

function autoUpdateStatusCategory() {
	if (gDebugSR) { writeDebugLn("<p>autoUpdateStatusCategory:"); }
	try {
		var msg = "Status Category changed ";
		if (gCurrentStatusCategory!=null && gCurrentStatusCategory!="") {
			msg += "from '"+gCurrentStatusCategory+"' ";
		}
		msg += "to '"+gTargetStatusCategory+"'";
		createSubmitRequestActivityLogEntry(msg);
		
		var contract = new sforce.SObject(gAgreementObjName);
		contract.Id = gContractId;
		contract.set(gTargetStatusCategoryField, gTargetStatusCategory);
		contract.set(gTargetStatusField, gTargetStatus);
		
		var result = sforce.connection.update([contract]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_UPDATE_STATUS,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_UPDATE_STATUS,ex);
	}
	finally {
		gMMObj = null;
	}
}

function autoUpdateStatus() {
	if (gDebugSR) { writeDebugLn("<p>autoUpdateStatus:"); }
	try {
		var msg = "Status changed ";
		if (gCurrentStatus!=null && gCurrentStatus!="") {
			msg += "from '"+gCurrentStatus+"' ";
		}
		msg += "to '"+gTargetStatus+"'";
		createSubmitRequestActivityLogEntry(msg);
		
		var contract = new sforce.SObject(gAgreementObjName);
		contract.Id = gContractId;
		//contract.set(gTargetStatusCategoryField, gTargetStatusCategory);
		contract.set(gTargetStatusField, gTargetStatus);
		
		var result = sforce.connection.update([contract]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_UPDATE_STATUS,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_UPDATE_STATUS,ex);
	}
	finally {
		gMMObj = null;
	}
}

function updateRequestDate() {
	if (gDebugSR) { writeDebugLn("<p>updateRequestDate:"); }
	
    var sObj = new sforce.SObject(gAgreementObjName);
    sObj.Id = gContractId;
    sObj.Apttus__Request_Date__c = new Date();
  	    
	var result = sforce.connection.update([sObj]);
	if (!result[0].getBoolean("success")) {
		erroralert(cERROR_UPDATE_REQUEST_DATE,result[0]);
	}
}

function sendToOtherPartyUpdateStatusCategory() {
	try {
		var sObj = new sforce.SObject(gAgreementObjName);
		sObj.Id = gObjectId;
		sObj.set(gTargetStatusCategoryField, gTargetStatusCategory);
		sObj.set(gTargetStatusField, gTargetStatus);
		
		var opsDate = "{!APTS_Agreement__c.Other_Party_Sent_Date__c}";
		if (opsDate=="" || opsDate==null) {
			sObj.set("Apttus__Other_Party_Sent_Date__c", new Date());
		}

		var result = sforce.connection.update([sObj]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_UPDATE_STATUS,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_UPDATE_STATUS,ex);
		throw(cERROR_UPDATE_STATUS);
	}
}

function closeMyOpenTasks(ownerId,objectId) {
	try {
		var q = "Select t.Id,t.WhoId,t.WhatId,t.OwnerId,t.Status,t.Description "+
				"From Task t where WhatId='"+objectId+"' ";
				"and OwnerId='"+ownerId+"'";

		var result = sforce.connection.query(q);
		var records = result.getArray("records");

		if (records.length>0) {
			var ids = new Array(records.length);
			for (var i=0; i<records.length; i++) {
				ids[i] = records[i].Id;
			}
		
			var result = sforce.connection.deleteIds([ids]);
		}
	}
	catch(ex) {
	}
}

function createSubmitRequestActivityLogEntry(msg) {
	if (gDebugSR) { writeDebugLn("<p>createSubmitRequestActivityLogEntry:"); }
	try {	
		var task = new sforce.SObject("Task");
		
		task.ActivityDate = new Date();
		msg = (msg==null) ? "" : "\r" + msg;
		task.Description = "Submitted Request for Agreement {!APTS_Agreement__c.FF_Agreement_Number__c}"+msg;
		task.OwnerId = "{!User.Id}";
		task.Priority = "Normal";
		task.Status = "Completed";
		task.Subject = "Submitted Request";
		task.WhatId = gObjectId;

		var result = sforce.connection.create([task]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_CREATE_ACTIVITY_LOG,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_CREATE_ACTIVITY_LOG,ex);
		navigateTo(gObjectIdURL);
	}
}

function createActionActivityHistory(subj,desc) {
	try {	
		var task = new sforce.SObject("Task");
		
		task.ActivityDate = new Date();
		task.Description = desc;
		task.OwnerId = "{!User.Id}";
		task.Priority = "Normal";
		task.Status = "Completed";
		task.Subject = subj;
		task.WhatId = gObjectId;

		var result = sforce.connection.create([task]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_CREATE_ACTIVITY_LOG,result[0]);
		}
	}
	catch(ex) {
		erroralert(cERROR_CREATE_ACTIVITY_LOG,ex);
	}
}

function updateAgreementVersions() {
	//query for other agreement versions
	var autonum = "{!APTS_Agreement__c.Agreement_Number__c}";
	var q = "select Id,Name from "+gAgreementObjName+" where Apttus__Agreement_Number__c='"+autonum+"'";
	var result = sforce.connection.query(q);
	var records = result.getArray("records");
	
	for (var i=0; i<records.length; i++) {
		var record = records[i];
		
		//terminate this record done by changing status category and status
		var sObj = new sforce.SObject(gAgreementObjName);
		
		sObj.Id = record.Id;
		sObj.Apttus__Status_Category__c = gTargetCatStatus;
		sObj.Apttus__Status__c = gTargetStatus;
		
		var result = sforce.connection.update([sObj]);
		if (!result[0].getBoolean("success")) {
			erroralert(cERROR_TERMINATE_AGREEMENT,result[0]);
		}
	}
}
function getWizardMode() {
    try {
		var msObj = getAdminObjSettings(cUSE_MERGE_SERVER);
		if (msObj==null) return null;
        
		var msName = msObj.name;
		var msValue = msObj.value;
		var msCode = msObj.code;

		var q = "select "+cADMIN_CODE+" from "+gAdminObjName+" where "+cADMIN_NAME+"='"+cUSE_MERGE_SERVER+"'";
		var result = sforce.connection.query(q);
		if (result.size>0) {
			var records = result.getArray("records");
			gMergeServerURL = records[0].get(cADMIN_CODE);
		}

  		if (msValue.toLowerCase()=="true" || msValue=="1") {
			gUseMergeServer = true;
		} else {
			gUseMergeServer = false;
		}
    }
    catch(ex) {
    }
}

function cloneAttachmentsForMergeServer(sObjType,fromObjId,toObjId) {
	if (gDebug) writeDebugLn("<br><br>cloneAttachments:<br>fromObjId="+fromObjId+"<br>toObjId="+toObjId);
	try {
		init();
		//get attachment object fields
		var dso = sforce.connection.describeSObject("Attachment");
	    var fieldList = getFieldList("Attachment");

		//get attachment ids owned by this parent since can't retrieve all bodies at once
		var q = "select Id,Name from Attachment where ParentId = '" + fromObjId + "'";	
		var result = sforce.connection.query(q);
		var records = result.getArray("records");
		
		for (j=0; j<records.length; j++) {
			var record = records[j];
			gProtectionLevel = getProtectionLevel();
			//alert(records[j].Name);
			gfilenameMergeServer=records[j].Name;
			doMakeFormRequestForMergeServer();
			buildMergeServerPage();
			//alert(gXmlRequestInputValue);
	    	document.msPage.submit();
		}
	}
	catch(ex) {
		erroralert(cERROR_CLONE_ATTACHMENT,ex);
	}
}

function doMakeFormRequestForMergeServer() {
	try {
	    gXmlRequestInputValue = "<Request>";
	    
	    gXmlRequestInputValue += "<ActionName>";
	    gXmlRequestInputValue += "UpdateAttachmentIDs";
	    gXmlRequestInputValue += "</ActionName>";
	    
	    gXmlRequestInputValue += "<CustomerID>";   
	    gXmlRequestInputValue += gUserName;
	    gXmlRequestInputValue += "</CustomerID>";
	
	    gXmlRequestInputValue += "<SessionID>";
	    gXmlRequestInputValue += gSessionId;
	    gXmlRequestInputValue += "</SessionID>";
	
	    gXmlRequestInputValue += "<ServerURL>";
	    gXmlRequestInputValue += gServerUrl;    
	    gXmlRequestInputValue += "</ServerURL>";
	
	    gXmlRequestInputValue += "<ObjectType>";
	    gXmlRequestInputValue += gObjType;
	    gXmlRequestInputValue += "</ObjectType>";
	
	    gXmlRequestInputValue += "<ObjectID>";
	    gXmlRequestInputValue += gObjId;  
	    gXmlRequestInputValue += "</ObjectID>";
	    
	    gXmlRequestInputValue += "<TemplateType>";
	    gXmlRequestInputValue += gTemplateType;
	    gXmlRequestInputValue += "</TemplateType>";
	
	    gXmlRequestInputValue += "<TemplateID>";
	    gXmlRequestInputValue += gTemplateId;  
	    gXmlRequestInputValue += "</TemplateID>";

	    gXmlRequestInputValue += "<AdminType>";
	    gXmlRequestInputValue += gAdminType;
	    gXmlRequestInputValue += "</AdminType>";
	
	    gXmlRequestInputValue += "<ProtectionLevel>";
	    gXmlRequestInputValue += gProtectionLevel;  
	    gXmlRequestInputValue += "</ProtectionLevel>";
	
	    gXmlRequestInputValue += "<DocumentPassword>";
	    gXmlRequestInputValue += gDocPassword;
	    gXmlRequestInputValue += "</DocumentPassword>";
	
	    gXmlRequestInputValue += "<IsDraft>";
	    gXmlRequestInputValue += gIsDraft;    
	    gXmlRequestInputValue += "</IsDraft>";
	
	    gXmlRequestInputValue += "<Debug>";
	    gXmlRequestInputValue += gDebug;
	    gXmlRequestInputValue += "</Debug>";
	    /*
	    gXmlRequestInputValue += "<UserID>";
	    gXmlRequestInputValue += "{!User.Id}";
	    gXmlRequestInputValue += "</UserID>";
	    */
	    gXmlRequestInputValue += "<Filename>";
	    gXmlRequestInputValue += gfilenameMergeServer;
	    gXmlRequestInputValue += "</Filename>";
/*
		gXmlRequestInputValue += "<AttachmentRequired>";
	    gXmlRequestInputValue += dAttachRequired;
	    gXmlRequestInputValue += "</AttachmentRequired>";	    
	    
	    gXmlRequestInputValue += "<ObjectToID>";
	    gXmlRequestInputValue += gObjToId;
	    gXmlRequestInputValue += "</ObjectToID>";	    
	*/    
	    gXmlRequestInputValue += "</Request>";
	    
	    return gXmlRequestInputValue;
	}
	catch(ex) {
		alert(ex);
		return "";
	}
}
function buildMergeServerPage() {
	var html = "";
	if (gUseMergeServer) {
		html += "<form id=\"msPage\" name=\"msPage\" method=\"post\" action=\""+ gMergeServerURL +"\" >";
	} else {
		html += "<form id=\"msPage\" name=\"msPage\" method=\"post\">";
	}
	html += "<table cellpadding=\"0\" cellspacing=\"2\" border=\"0\">";
	html += "<tr>";
	html += "<td>"
	html += "<input type=\"hidden\" name=\"xmlInput\" id=\"xmlInput\" value=\"" + gXmlRequestInputValue + "\">";
	html += "</td>";
	html += "</tr>";
	html += "</table>";
	html += "</form>";
	setMain(html);
}

</script>