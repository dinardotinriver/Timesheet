<apex:component controller="DragDropAttach.AttachContent" id="comp" allowDML="true"> 
<!--    <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery-1.7.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery-ui-1.8.18.custom.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery.easy-confirm-dialog.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/FileUploadCSS.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/chatterCore.css')}"/>  
    <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/ui-lightness/jquery-ui-1.8.18.custom.css')}"/>
    <script type="text/javascript" src="/soap/ajax/22.0/connection.js" />
    <apex:form >
        <script type="text/javascript">
            var j$ = jQuery.noConflict();
            var byteChunkArray; 
            var files;
            var currentFile;
            var $upload;
            var VIEW_URL = '/sfc/#version/';
            var uploadCounter = 0;
            var progressCounter = 0;
            var count=0;
            //Executes when start Upload button is selected
            function prepareFileUploads(evt){
                evt.preventDefault();
                if(document.getElementById('pg:j_id0:comp:pb:frm:pbs:pbsi:libraryId').value=='') {
                    alert('Please select Library before drag, drop files');
                    return;
                }
                
                 //Reinitialize variables if drag and drop performing again
                uploadCounter = 0;
                progressCounter = 0;
                count =0;
            
                j$('.uploadBox').show();
        
                //Get the file(s) from the input field
                files = evt.dataTransfer.files; // FileList object.
        
                //Only proceed if there are files selected
                if(files.length == 0){
                    alert('Please select a file!');
                    return; //end function
                }
        
                //Build out the upload divs for each file selected
                var uploadMarkup = '';
                for(i = 0; i < files.length; i++){
                    //Determine file display size
                    if(files[i].size < 1000000){
                        var displaySize = Math.floor(files[i].size/1000) + 'K';
                        
                    }else{
                        var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                    }
        
                    //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                    uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                    uploadMarkup += '<span style="width:550px;display:inline-block;">';
                    uploadMarkup += '<img class="statusbar img'+i+'" style="height: 16px;width: 16px;margin-right: 6px;" src="{!URLFOR($Resource.jquery, 'uploading.gif')}" />';   
                    uploadMarkup += '<span class="fileName"><span class="name name'+i+'">'+ files[i].name + '</span> ('+ displaySize+ ')</span>';
                    uploadMarkup += '<span class="percentComplete percentComplete'+i+'">Pending</span></span>';
                    uploadMarkup += '</span>';
                    uploadMarkup += '<div class="clear"/>';
                    uploadMarkup += '</div>';
                    
                }
                //Empty earlier contents
                j$('.uploadBox').html('');
                //Add markup to the upload box
                j$('.uploadBox').append(uploadMarkup);
                j$('.uploadBox').dialog({
                    autoOpen: false,
                    draggable: false,
                    modal: true,
                    resizable: false,
                    width: 590,
                    height: 350,
                    buttons:{"Cancel Remaining Uploads": function(){},"Done":function(){j$(this).dialog("close" );uploadComplete();}},
                    open: function(event, ui) { jQuery('.ui-dialog-titlebar-close').hide(); }         
                });
                
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).easyconfirm();                                 
                j$('.uploadBox').dialog('open');        
                j$(".ui-dialog-title").html('Upload Contents');
                        
                //Once elements have been added to the page representing the uploads, start the actual upload process
                checkForUploads();
            }
            
            
            function checkForUploads(){
                 //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
                 $upload = j$(".upload:first[data-status='pending']");
                if(uploadCounter<files.length){
                    currentFile = files[uploadCounter];
                    if(uploadCounter==(files.length-1)){
                        j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).attr('disabled','disabled');   
                    }
                    
                    if(currentFile.size <= 17000000){
                        //Start uploading the current file, parameter is ''
                        processCurrentFile('');
        
                    }
                    else {
                        $upload.find('.img'+uploadCounter).hide();
                        $upload.attr('data-status','complete');
                        $upload.find('.percentComplete'+uploadCounter).html('<font style="color:#FF0000;">Error : File is too large</font>');
                        callUpload();
                    }
                    
                   
                }
                else{
                    console.log("All Files has been uploaded Successfully");
                     performUploadCompleteActions();
                }
                
        
            }
            
            
            function callUpload(){
                count++;
                progressCounter++;
                uploadCounter++;
                checkForUploads();
                
            }
            
        
            function performUploadCompleteActions(){
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
                uploadComplete();
            }
        
            function performUploadCancelActions(){
                files = null;
        
                j$(".upload:[data-status='pending']").find('.percentComplete').html('<font style="color:#C00000;;">Canceled</font>');
                j$(".upload:[data-status='pending']").find('.statusbar').hide();
                j$(".upload:[data-status='pending']").attr('data-status','complete');
        
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
        
                uploadComplete();
            }
            
            
            
            //Uploads a file
            function processCurrentFile (attachmentId){
                //Proceed if file size is more than 0
                if(currentFile.size > 0){
                    //Create a new reader object, part of HTML5 File API
                    var reader = new FileReader();
        
                    //Read the currentFile as a binary string, reader.onloadend function below is automatically called after this line
                  
                    reader.readAsArrayBuffer(currentFile);
                    
                    //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
                    reader.onloadend = function(evt){ 
                        if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                            
                            j$('.percentComplete'+count).html('<font style="color:#00DA40;">Uploading...</font>');
                            $upload.attr('data-status','complete');
                            
                            //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                            
                            var binary = "";
                            var bytes = new Uint8Array(evt.target.result);
                            var length = bytes.byteLength;
                            
                            for (var i = 0; i < length; i++) 
                            {
                                binary += String.fromCharCode(bytes[i]);
                            }
                            var base64value = (new sforce.Base64Binary(binary)).toString();
        
                            //Use action funtion to send the base64 encoded chunk for uploading
                            var libraryId = document.getElementById('pg:j_id0:comp:pb:frm:pbs:pbsi:libraryId').value;
                            console.log("libraryId -    " +libraryId );
                            //call actionfunction to upload content
                            attachBlob(libraryId,attachmentId,files[count].name,base64value);
                            
                        }             
                        else{
                            //If script is here something broke on the JavasSript remoting call
                            //Add classes to reflect error  
                            $upload.attr('data-status','complete');
                            if(event.message=='String length exceeds maximum: 6000000'){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : File is too large</font>');
                            }
                            else if(event.message.match("STORAGE_LIMIT_EXCEEDED")){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : STORAGE_LIMIT_EXCEEDED</font>');
                            }
                            else {
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : '+event.message+'</font>');
                            }
                        }
                    };
        
                }
                else{
                    alert("Please select a file");
                }
               
                               
            }       
            
            
            
            //Change UI when current file uploaded
            
            function completedCurrentUpload(Id,uploadedFileName){
                    j$('.name'+progressCounter).html('<a href="' + VIEW_URL + Id + '" target="_blank">'+uploadedFileName+'</a>');
                    j$('.img'+progressCounter).hide();
                    j$('.percentComplete'+progressCounter).html('<font style="color:#008040;">Done</font>');
                    //call method which will upload next file if its available 
                    callUpload();
                  
            }
             
        </script>
        
        <apex:actionFunction name="attachBlob" action="{!attachBlob}" rerender="pageMessages, relatedListOP"  oncomplete="completedCurrentUpload('{!attachmentId}','{!fileName}');return false;">
            <apex:param name="libraryId" value="" assignTo="{!libraryId}"  />
            <apex:param name="attachmentId" value="" assignTo="{!attachmentId}"  />
            <apex:param name="name" value="" assignTo="{!fileName}"  />
            <apex:param name="base64BlobValue" value="" assignTo="{!base64BlobValue}"  />   
        </apex:actionFunction>
        <apex:actionFunction name="uploadComplete" action="{!uploadComplete}" rerender="relatedListOP"/>
        
    </apex:form>    
    
    
    <apex:pageBlock rendered="{!!isContentEnabled}">
        <p>To use 'Upload Contents', you will need access to the Salesforce CRM Content feature. Please contact your system administrator requesting 'Salesforce CRM Content User' permission.</p>
    </apex:pageBlock>
    <apex:pageMessages id="pageMessages"></apex:pageMessages>
    <apex:outputPanel rendered="{!isContentEnabled}" id="op">
        <apex:pageBlock title="Step1 :" id="pb">
            <apex:form id="frm">
                <apex:pageBlockSection columns="1" id="pbs">
                    <apex:pageBlockSectionItem id="pbsi">
                        <apex:outputLabel value="Select Library"></apex:outputLabel>
                        <apex:selectList value="{!libraryId}" size="1" style="width:200px;" id="libraryId">
                            <apex:actionSupport event="onchange" action="{!uploadComplete}" rerender="relatedListOP" status="status"/>
                            <apex:selectoptions value="{!libraryList}"/>
                        </apex:selectList>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                
                <apex:actionStatus id="status">&nbsp;
                    <apex:facet name="start" >
                        <img class="waitingImage" src="/img/loading.gif" title="Loading..." />
                    </apex:facet>
                </apex:actionStatus><br/>           
            </apex:form>
        </apex:pageBlock>
        
        <apex:pageBlock title="Step 2 : Drag & Drop Files">
            <div id="drop_zone">Drag and Drop files into this outlined area to upload as Content</div>
            <div class="uploadBox"></div><br/>
            <div id="dragAndDropTargetDiv" class="dragAndDropTargetDiv" style="display: none;">
                <div class="dragAndDropTargetImg"></div>
                <div class="dragAndDropTargetTextDiv">Drag and Drop Files Here</div>
            </div>              
        </apex:pageBlock>    
          
        <apex:outputPanel id="relatedListOP">
        <apex:pageBlock title="Existing Content">
            <apex:pageBlockTable value="{!contents}" var="c" rendered="{!NOT(ISNULL(contents))}">
                <apex:column headerValue="Content Title">
                    
                    <apex:outputLink target="blank" value="{!$Setup.DragDropAttach__Configuration__c.DragDropAttach__Community_Url__c}/sfc/#version/{!c.Id}" 
                    rendered="{!NOT(isAdminUser)}" >
                    {!c.Title}
                    </apex:outputLink>
                    <apex:outputLink target="blank" value="/sfc/#version/{!c.Id}" rendered="{!isAdminUser}" >
                    {!c.Title}
                    </apex:outputLink>
                </apex:column>
                <apex:column headerValue="Library">
                    <apex:outputText rendered="{!c.FirstPublishLocationId==$User.Id}">
                        My Personal Library
                    </apex:outputText>
                    <apex:outputPanel rendered="{!c.FirstPublishLocationId!=$User.Id}">
                        <a href="/sfc/#workspaceView?selectedWorkspaceId={!c.FirstPublishLocationId}" target="_blank">{!c.FirstPublishLocation.Name}</a>
                    </apex:outputPanel>  
                    {!c.FirstPublishLocationId}                   
                </apex:column>
                <apex:column value="{!c.ContentSize}" headerValue="Size (in Bytes)"/>
                <apex:column value="{!c.CreatedDate}"/>
                <apex:column value="{!c.CreatedById}"/>                
           </apex:pageBlockTable>
        </apex:pageBlock>
        </apex:outputPanel>       
          
        <style>
        .bPageBlock .pbTitle {
            width:100%;
        }
        </style>      
          
       
        
        <script>
            var j$ = jQuery.noConflict();
            function dragenter(e) {
                    count =0;
                    e.stopPropagation();
                    e.preventDefault();
            }
            
            function handleDragOver(evt)
            {
                evt.stopPropagation();
                evt.preventDefault();
                evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
            }
            
            if(!window.FileReader) {
                alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading contents.");
                window.location.href = '/sfc/#workspaces/';
            }
            else {                
                // Setup the dnd listeners.
                j$(document).ready(function(){
                try{ 
                    var dropZone = document.getElementById('drop_zone');
                    dropZone.addEventListener('dragenter', dragenter, false);
                    dropZone.addEventListener("dragover", handleDragOver, false);
                    dropZone.addEventListener('drop', prepareFileUploads, false);
                    }
                     catch(err) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments. (Technical Details : "+err+")");
                        window.location.href = '/p/attach/NoteAttach?pid='+recordNewid+'&parentname='+recordname+'&retURL=%2F'+recordNewid;
                    }    
                });
            }
        </script>
    </apex:outputPanel>
    -->            
</apex:component>