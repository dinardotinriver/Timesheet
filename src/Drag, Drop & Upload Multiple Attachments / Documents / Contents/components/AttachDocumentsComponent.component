<apex:component controller="DragDropAttach.AttachDocuments" allowDML="true"> 

    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__jquery, 'js/jquery-1.7.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__jquery, 'js/jquery-ui-1.8.18.custom.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__jquery, 'js/jquery.easy-confirm-dialog.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropAttach__jquery, 'css/FileUploadCSS.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropAttach__jquery, 'css/chatterCore.css')}"/>  
    <apex:stylesheet value="{!URLFOR($Resource.DragDropAttach__jquery, 'css/ui-lightness/jquery-ui-1.8.18.custom.css')}"/>
    
    <script type="text/javascript" src="/soap/ajax/22.0/connection.js" />
   
    <apex:pageBlock rendered="{!!isDocumentEnabled}">
        <p>To use 'Upload Documents', you will need access to the Salesforce Document feature. Please contact your system administrator requesting Read &amp; Create (Write) access to the Document object.</p>
    </apex:pageBlock>
    <apex:outputPanel rendered="{!isDocumentEnabled}">
        <apex:pageBlock title="Step1 : Select Document Folder">
            <apex:form >
                <apex:pageMessages id="pageMessages"></apex:pageMessages>
                <apex:selectList value="{!folderId}" size="1" style="width:200px;" id="folderId">
                    <apex:actionSupport event="onchange" action="{!uploadComplete}" rerender="relatedListOP" status="status"/>
                    <apex:selectoptions value="{!folderList}"/>
                </apex:selectList>
                <apex:actionStatus id="status">&nbsp;
                    <apex:facet name="start" >
                        <img class="waitingImage" src="/img/loading.gif" title="Loading..." />
                    </apex:facet>
                </apex:actionStatus><br/>
            </apex:form>
        </apex:pageBlock>
    
        <apex:pageBlock title="Step 2a (Optional) : Upload Options">
            <apex:form >
                <apex:outputLabel value="Upload / Update Documents"/>
                <apex:inputCheckbox id="isUpdateCheckbox" value="{!isUpdate}"></apex:inputCheckbox><br/>
                <small>If this is selected, any document being uploaded that has the same name as an existing document in this folder will be updated. If not selected, all documents uploaded will be added as new documents.</small><br/><br/>
                
                <apex:outputLabel value="Externally Available Douments"/>
                <apex:inputCheckbox id="isPublic" value="{!isPublic}"></apex:inputCheckbox><br/>
                <small>If this is selected, any document being uploaded will be available for external use.</small><br/>                
            </apex:form>
        </apex:pageBlock>               
    
        <apex:pageBlock title="Step 2b : Drag & Drop Files">
            <div class="dropboxContainer"><div id="drop_zone">Drag and Drop files into this outlined area to upload as Documents</div></div>
            <div class="uploadBox"></div><br/>
            <div id="dragAndDropTargetDiv" class="dragAndDropTargetDiv" style="display: none;">
                <div class="dragAndDropTargetImg"></div>
                <div class="dragAndDropTargetTextDiv">Drag and Drop Files Here</div>
            </div>              
        </apex:pageBlock>    
        
        <apex:outputPanel id="relatedListOP">
        <apex:pageBlock title="Existing Documents">
            <apex:pageBlockTable value="{!documents}" var="d" rendered="{!NOT(ISNULL(documents))}">
                <apex:column headerValue="Document Name">
                    <a href="/{!d.Id}" target="_blank">{!d.Name}</a>
                </apex:column>
                <apex:column headerValue="Folder">
                    <apex:outputText rendered="{!d.FolderId==$User.Id}">
                        <a href="/015?fcf={!$User.Id}" target="_blank">My Personal Documents</a>
                    </apex:outputText>
                    <apex:outputPanel rendered="{!d.FolderId!=$User.Id}">                
                        <a href="/015?fcf={!LEFT(d.FolderId,15)}" target="_blank">{!d.Folder.Name}</a>
                    </apex:outputPanel>
                </apex:column>
                <apex:column value="{!d.BodyLength}" headerValue="Size (in Bytes)"/>
                <apex:column value="{!d.CreatedDate}"/>
                <apex:column value="{!d.LastModifiedDate}"/>
                <apex:column value="{!d.CreatedById}"/>
                <apex:column value="{!d.IsPublic}"/>
                <apex:column headerValue="View File">
                    <a href="/servlet/servlet.FileDownload?file={!d.Id}" target="_blank">View File</a>
                </apex:column>                    
           </apex:pageBlockTable>
        </apex:pageBlock>
        </apex:outputPanel>          
        
        <style>
        .bPageBlock .pbTitle {
            width:100%;
        }
        </style>      
          
        <apex:form >   
         <script>
         
        var count =0;
        var j$ = jQuery.noConflict();
        var files;
        var currentFile;
        var $upload;
        var uploadCounter = 0;
        var progressCounter = 0;
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';
        j$(window).load(function(){    
           j$("#drop_zone").bind('dragover',function() {  
                j$('#drop_zone').css('border','2px dashed #3385E2').css('color','#3385E2'); }).bind('dragleave', function() { j$('#drop_zone').css('border','2px dashed #ccc').css('color','#ccc'); 
            });  
        });
        //Executes when start Upload button is selected
        function prepareFileUploads(evt){
            evt.preventDefault();
            if(document.getElementById('j_id0:j_id1:j_id2:j_id13:j_id14:folderId').value=='') {
                alert('Please select Folder before drag, drop files');
                return;
            }
            
            //Reinitialize variables if drag and drop performing again
            uploadCounter = 0;
            progressCounter = 0;
            count =0;
            
            
            j$('.uploadBox').show();
    
            //Get the file(s) from the input field
            files = evt.dataTransfer.files; // FileList object.
    
            //Only proceed if there are files selected
            if(files.length == 0){
                alert('Please select a file!');
                return; //end function
            }
    
            //Build out the upload divs for each file selected
            var uploadMarkup = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                if(files[i].size < 1000000){
                    
                    var displaySize = Math.floor(files[i].size/1000) + 'K';
                }else{
                    var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                }
    
                
                    //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                    uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                    uploadMarkup += '<span style="width:550px;display:inline-block;">';
                    uploadMarkup += '<img class="statusbar img'+i+'" style="height: 16px;width: 16px;margin-right: 6px;" src="{!URLFOR($Resource.DragDropAttach__jquery, 'uploading.gif')}" />';   
                    uploadMarkup += '<span class="fileName"><span class="name name'+i+'">'+ files[i].name + '</span> ('+ displaySize+ ')</span>';
                    uploadMarkup += '<span class="percentComplete percentComplete'+i+'">Pending</span></span>';
                    uploadMarkup += '</span>';
                    uploadMarkup += '<div class="clear"/>';
                    uploadMarkup += '</div>';
                    
        
                    
                }
                //Empty earlier contents
                j$('.uploadBox').html('');
                //Add markup to the upload box
                j$('.uploadBox').append(uploadMarkup);
                j$('.uploadBox').dialog({
                    autoOpen: false,
                    draggable: false,
                    modal: true,
                    resizable: false,
                    width: 590,
                    height: 300,
                    buttons:{"Cancel Remaining Uploads": function(){},"Done":function(){j$(this).dialog("close" );uploadComplete();}},
                    open: function(event, ui) { jQuery('.ui-dialog-titlebar-close').hide(); }
                });
        
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).easyconfirm();
                j$('.uploadBox').dialog('open');
                j$(".ui-dialog-title").html('Upload Documents');
        
                //Once elements have been added to the page representing the uploads, start the actual upload process
                
                checkForUploads();
            }
        
            function checkForUploads(){
                //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
                $upload = j$(".upload:first[data-status='pending']");
                if(uploadCounter<files.length){
                    currentFile = files[uploadCounter];
                    if(uploadCounter==(files.length-1)){
                        j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).attr('disabled','disabled');   
                    }
                    
                    if(currentFile.size <= 5000000){
                        //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
                        processCurrentFile('');
        
                    }
                    else {
                        $upload.find('.img'+uploadCounter).hide();
                        $upload.attr('data-status','complete');
                        $upload.find('.percentComplete'+uploadCounter).html('<font style="color:#FF0000;">Error : File is too large</font>');
                        callUpload();
                    }
                    
                   
                }
                else{
                    console.log("All Files has been uploaded Successfully");
                     performUploadCompleteActions();
                }
                
        
            }
            
            function callUpload(){
                count++;
                progressCounter++;
                uploadCounter++;
                checkForUploads();
                
            }
            
        
            function performUploadCompleteActions(){
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
                uploadComplete();
                j$('#drop_zone').css('border','2px dashed #ccc').css('color','#ccc');
            }
        
            function performUploadCancelActions(){
                files = null;
        
                j$(".upload:[data-status='pending']").find('.percentComplete').html('<font style="color:#C00000;;">Canceled</font>');
                j$(".upload:[data-status='pending']").find('.statusbar').hide();
                j$(".upload:[data-status='pending']").attr('data-status','complete');
        
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
        
                uploadComplete();
                j$('#drop_zone').css('border','2px dashed #ccc').css('color','#ccc');
            }
            
            
            
            function processCurrentFile(documentId ){
                //Proceed if file size is more than 0
                if(currentFile.size > 0){
                    //Create a new reader object, part of HTML5 File API
                    var reader = new FileReader();
        
                    //Read the currentFile as a binary string, reader.onloadend function below is automatically called after this line
                    //reader.readAsDataURL(currentFile);
                    reader.readAsArrayBuffer(currentFile);
                    
                    //reader.readAsBinaryString(currentFile);
                    //Create a reader.onload function, this will execute immediately after reader.readAsArrayBuffer() function above;
                    reader.onloadend = function(evt){
                        if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                            //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                             var binary = "";
                            var bytes = new Uint8Array(evt.target.result);
                            var length = bytes.byteLength;
                            
                            for (var i = 0; i < length; i++) 
                            {
                                binary += String.fromCharCode(bytes[i]);
                            }
                            var base64Value = (new sforce.Base64Binary(binary)).toString();
                            //var base64Value = window.btoa(evt.target.result);
                           
                            j$('.percentComplete'+count).html('<font style="color:#00DA40;">Uploading...</font>');
                            $upload.attr('data-status','complete');
                            //Use Action Function to send the base64 encoded chunk for uploading
                            
                            var folderId = document.getElementById('j_id0:j_id1:j_id2:j_id13:j_id14:folderId').value;
                            var isUpdate = document.getElementById('j_id0:j_id1:j_id2:j_id45:j_id46:isUpdateCheckbox').checked;
                            var isPublic = document.getElementById('j_id0:j_id1:j_id2:j_id45:j_id46:isPublic').checked;
                            //Call controller method to upload document
                            attachBlob(isUpdate, isPublic, folderId, documentId, files[count].name, files[count].type, base64Value);
                            
                            //Change name of file to link of uploaded attachment
                            $upload.find('.name'+count).html('<a href="' + VIEW_URL + documentId + '" target="_blank">'+files[count].name+'</a>');  
                            //update the count variable 
                            
                        }
                                
                        else{
                            //If script is here something broke on the JavasSript remoting call
                            //Add classes to reflect error  
                            $upload.attr('data-status','complete');
                            if(event.message=='String length exceeds maximum: 6000000'){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : File is too large</font>');
                            }
                            else if(event.message.match("STORAGE_LIMIT_EXCEEDED")){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : STORAGE_LIMIT_EXCEEDED</font>');
                            }
                            else {
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : '+event.message+'</font>');
                            }
                        }
                    };
        
                }
                else{
                    alert("Please select a file");
                }
               
            }
            
            //Change UI when current file uploaded
            
            function completedCurrentUpload(Id,uploadedFileName){
                    j$('.name'+progressCounter).html('<a href="' + VIEW_URL + Id + '" target="_blank">'+uploadedFileName+'</a>');
                    j$('.img'+progressCounter).hide();
                    j$('.percentComplete'+progressCounter).html('<font style="color:#008040;">Done</font>');
                    //call method which will upload next file if its available 
                    callUpload();
                  
            }
           
    </script> 
             <apex:actionFunction name="attachBlob" action="{!attachBlob}" rerender="pageMessages, relatedListOP"  oncomplete="completedCurrentUpload('{!documentId}','{!fileName}');return false;">
                <apex:param name="isUpdate" value="" assignTo="{!isUpdate}"  />
                <apex:param name="isPublic" value="" assignTo="{!isPublic}"  />
                <apex:param name="folderId" value="" assignTo="{!folderId}"  />
                <apex:param name="documentId" value="" assignTo="{!documentId}"  />
                <apex:param name="name" value="" assignTo="{!fileName}"  />
                <apex:param name="type" value="" assignTo="{!contentType}"  />
                <apex:param name="base64BlobValue" value="" assignTo="{!base64BlobValue}"  />              
            </apex:actionFunction>   
            <apex:actionFunction name="uploadComplete" action="{!uploadComplete}" rerender="relatedListOP"/>
        </apex:form>
    
        <script>
            var j$ = jQuery.noConflict();
            function dragenter(e) {
                    count =0;
                    e.stopPropagation();
                    e.preventDefault();
            }
            
            function handleDragOver(evt)
            {
                evt.stopPropagation();
                evt.preventDefault();
                evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
            }
            
            if(!window.FileReader) {
                alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading documents.");
                window.location.href = '/p/doc/DocumentUploadUi?retURL=%2F015%2Fo';
            }
            else {                
                j$(document).ready(function(){
                try{ 
                    var dropZone = document.getElementById('drop_zone');
                    dropZone.addEventListener('dragenter', dragenter, false);
                    dropZone.addEventListener("dragover", handleDragOver, false);
                    dropZone.addEventListener('drop', prepareFileUploads, false);
                    }
                     catch(err) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments. (Technical Details : "+err+")");
                        window.location.href = '/p/attach/NoteAttach?pid='+recordNewid+'&parentname='+recordname+'&retURL=%2F'+recordNewid;
                    }    
                });  
            }
        </script>
    </apex:outputPanel> 
                
</apex:component>