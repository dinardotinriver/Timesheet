<apex:component controller="DragDropAttach.AttachFiles" allowDML="true" >
    <!--
    <apex:attribute name="recordNewid" assignTo="{!recordid}" description="The ID of the record uploaded documents will be attached to." type="String" required="true"/>
    <apex:attribute name="recordname" description="The Name/AutoNumber of the record uploaded documents will be attached to." type="String" required="true"/>
    <apex:attribute name="recordtype" description="The Type of the record uploaded documents will be attached to." type="String" required="true"/>
    <apex:form >
       <apex:pagemessages id="pageMessages"></apex:pagemessages>
       <!-- <apex:includeScript value="{!$Resource.jquery1}"/> -->
    <!--
        <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery-1.5.2.js')}"/> 
        <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery-1.7.1.min.js')}"/> 
       
        <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery-ui-1.8.18.custom.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.jquery, 'js/jquery.easy-confirm-dialog.js')}"/>
        
        <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/FileUploadCSS.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/chatterCore.css')}"/>  
        <apex:stylesheet value="{!URLFOR($Resource.jquery, 'css/ui-lightness/jquery-ui-1.8.18.custom.css')}"/>
        <script type="text/javascript" src="/soap/ajax/22.0/connection.js" />
        
        <script>
        
            var count =0;
            var j$ = jQuery.noConflict();
            var files;
            var currentFile;
            var $upload;
            var uploadCounter = 0;
            var progressCounter = 0;
            var VIEW_URL = '/servlet/servlet.FileDownload?file=';
            var cancelPerformed = false;
            var recordNewid= '{!JSENCODE(recordid)}'; //Will be used in below code. 
            var recordname = '{!JSENCODE(recordname)}'; //Will be used in below code.
            var recordtype = '{!JSENCODE(recordtype)}'; //Will be used in below code. 
                
            
            //Executes when start Upload button is selected
            function prepareFileUploads(evt){
                //Initialize variables 
                files = null;
                currentFile = null;
                count=0;
                uploadCounter = 0;
                progressCounter = 0;
                evt.preventDefault();
                j$('.uploadBox').show();
        
                //Get the file(s) from the input field
                files = evt.dataTransfer.files; // FileList object.
                //Only proceed if there are files selected
                if(files.length == 0){
                    alert('Please select a file!');
                    return; //end function
                }
        
                //Build out the upload divs for each file selected
                var uploadMarkup = '';
                for(i = 0; i < files.length; i++){
                    //Determine file display size
                    if(files[i].size < 1000000){
                        var displaySize = Math.floor(files[i].size/1000) + 'K';
                    }else{
                        var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                    }
                    
                   
                    //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                    uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                    uploadMarkup += '<span style="width:550px;display:inline-block;">';
                    uploadMarkup += '<img class="statusbar img'+i+'" style="height: 16px;width: 16px;margin-right: 6px;" src="{!URLFOR($Resource.jquery, 'uploading.gif')}" />';   
                    uploadMarkup += '<span class="fileName"><span class="name name'+i+'">'+ files[i].name + '</span> ('+ displaySize+ ')</span>';
                    uploadMarkup += '<span class="percentComplete percentComplete'+i+'">Pending</span></span>';
                    uploadMarkup += '</span>';
                    uploadMarkup += '<div class="clear"/>';
                    uploadMarkup += '</div>';
                    
        
                    
                }
                //Empty earlier contents
                j$('.uploadBox').html('');
                //Add markup to the upload box
                j$('.uploadBox').append(uploadMarkup);
                j$('.uploadBox').dialog({
                    autoOpen: false,
                    draggable: false,
                    modal: true,
                    resizable: false,
                    width: 590,
                    height: 300,
                    buttons:{"Cancel Remaining Uploads": function(){},"Done":function(){j$(this).dialog("close" );uploadComplete();}},
                    open: function(event, ui) { jQuery('.ui-dialog-titlebar-close').hide(); }
                });
        
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).easyconfirm();
                j$('.uploadBox').dialog('open');
                j$(".ui-dialog-title").html('Attach files to "'+recordname+'"');
        
                //Once elements have been added to the page representing the uploads, start the actual upload process
                
                checkForUploads();
            }
        
            function checkForUploads(){
                //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
                $upload = j$(".upload:first[data-status='pending']");
                if(uploadCounter<files.length){
                    currentFile = files[uploadCounter];
                    if(uploadCounter==(files.length-1)){
                        j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).attr('disabled','disabled');   
                    }
                    console.log($( "#fileSizeValue option:selected" ).val());
                    if(currentFile.size <= 17000000){
                        //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
                        processCurrentFile('');
        
                    }
                    else {
                        console.log(uploadCounter);
                        $upload.find('.img'+uploadCounter).hide();
                        $upload.attr('data-status','complete');
                        $upload.find('.percentComplete'+uploadCounter).html('<font style="color:#FF0000;">Error : File is too large</font>');
                        callUpload();
                    }
                    
                   
                }
                else{
                    console.log("All Files has been uploaded Successfully");
                     performUploadCompleteActions();
                }
                
        
            }
            
            function callUpload(){
                 //update the count variable 
                count++;
                progressCounter++;
                uploadCounter++;
                checkForUploads();
                
            }
            
        
            function performUploadCompleteActions(){
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
                uploadComplete();
            }
        
            function performUploadCancelActions(){
                files = null;
        
                j$(".upload:[data-status='pending']").find('.percentComplete').html('<font style="color:#C00000;;">Canceled</font>');
                j$(".upload:[data-status='pending']").find('.statusbar').hide();
                j$(".upload:[data-status='pending']").attr('data-status','complete');
                
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
                var countElements = j$(".percentComplete:contains('Uploading...')").length;
                if(countElements == 1){
                    j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).attr('disabled','disabled');  
                    cancelPerformed = true; 
                }
                uploadComplete();
            }
            
            
            
            function processCurrentFile(attachmentId ){
                //Proceed if file size is more than 0
                if(currentFile.size > 0){
                    //Create a new reader object, part of HTML5 File API
                    var reader = new FileReader();
        
                    //Read the currentFile as a binary string, reader.onloadend function below is automatically called after this line
                    //reader.readAsDataURL(currentFile);
                    reader.readAsArrayBuffer(currentFile);
        
                    //reader.readAsArrayBuffer(blobChunk);
                    //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
                    reader.onloadend = function(evt){
                        if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                            //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                            var binary = "";
                            var bytes = new Uint8Array(evt.target.result);
                            var length = bytes.byteLength;
                            for (var i = 0; i < length; i++) 
                            {
                                binary += String.fromCharCode(bytes[i]);
                            }
                            var base64Value = (new sforce.Base64Binary(binary)).toString();
                            //Update Info in UI
                            $('.percentComplete'+count).html('<font style="color:#00DA40;">Uploading...</font>');
                            $upload.attr('data-status','complete');
                            //Use Action Function to send the base64 encoded chunk for uploading
                            attachBlob(attachmentId,recordNewid,files[count].name,files[count].type,base64Value);
                            //Change name of file to link of uploaded attachment
                            //$upload.find('.name'+count).html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+files[count].name+'</a>');  
                            
                        }
                                
                        else{
                            //If script is here something broke on the JavasSript remoting call
                            //Add classes to reflect error  
                            $upload.attr('data-status','complete');
                            if(event.message=='String length exceeds maximum: 6000000'){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : File is too large</font>');
                            }
                            else if(event.message.match("STORAGE_LIMIT_EXCEEDED")){
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : STORAGE_LIMIT_EXCEEDED</font>');
                            }
                            else {
                                $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : '+event.message+'</font>');
                            }
                        }
                    };
        
                }
                else{
                    alert("Please select a file");
                }
               
            }
            
            //Change UI when current file uploaded
            
            function completedCurrentUpload(Id,uploadedFileName){
                    $('.name'+progressCounter).html('<a href="' + VIEW_URL + Id + '" target="_blank">'+uploadedFileName+'</a>');
                    $('.img'+progressCounter).hide();
                    $('.percentComplete'+progressCounter).html('<font style="color:#008040;">Done</font>');
                    //call method which will upload next file if it's available
                    if(cancelPerformed){
                        j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).removeAttr('disabled');    
                    }
                    callUpload();
                  
            }
    
        </script>
        
        <apex:pageBlock title="Attach Files to {!recordtype} - {!recordname}">
            <!-- <a style="display: block;" href="#" id="drop_zone">Drag and Drop files into this outlined area to attach</a> -->
            <!-- <div id="drop_zone">Drag and Drop files into this outlined area to upload(attach) as Attachments</div>
            <div class="uploadBox"></div><br/>
            <div id="dragAndDropTargetDiv" class="dragAndDropTargetDiv" style="display: none;">
                <div class="dragAndDropTargetImg"></div>
                <div class="dragAndDropTargetTextDiv">Drag and Drop Files Here</div>
            </div>              
        </apex:pageBlock>    
          
        <style>
        .bPageBlock .pbTitle {
            width:100%;
        }
        </style>      
        
        
        <apex:variable var="recordid" value="{!$CurrentPage.parameters.recordNewid}" />
        <apex:variable var="recordname" value="{!$CurrentPage.parameters.recordname}" />
        <apex:variable var="recordtype" value="{!$CurrentPage.parameters.recordtype}" />
        
        <apex:actionFunction name="attachBlob" action="{!attachBlob}" rerender="relatedListOP, pageMessages"  oncomplete="completedCurrentUpload('{!attachmentId}','{!fileName}');return false;">
            <apex:param name="attachmentId" value="" assignTo="{!attachmentId}"  />
            <apex:param name="recordid" value="" assignTo="{!recordid}"/>
            <apex:param name="name" value="" assignTo="{!fileName}"  />
            <apex:param name="type" value="" assignTo="{!contentType}"  />
            <apex:param name="base64BlobValue" value="" assignTo="{!base64BlobValue}"  />         
        </apex:actionFunction>   
        <apex:actionFunction name="uploadComplete" action="{!uploadComplete}" rerender="relatedListOP"/>
     
              
        
        <script type="text/javascript">
           
             function dragenter(e) {
                    count =0;
                    e.stopPropagation();
                    e.preventDefault();
            }
            function handleDragOver(evt){
                //alert(evt);
                evt.stopPropagation();
                evt.preventDefault();
                evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
            }
             if(!window.FileReader) {
                alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments.");
                window.location.href = '/p/attach/NoteAttach?pid='+recordid+'&parentname='+recordname+'&retURL=%2F'+recordid;
            }
            else { 
            $(document).ready(function(){
                try{ 
                    var dropZone = document.getElementById('drop_zone');
                    dropZone.addEventListener('dragenter', dragenter, false);
                    dropZone.addEventListener("dragover", handleDragOver, false);
                    dropZone.addEventListener('drop', prepareFileUploads, false);
                    }
                     catch(err) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. Redirecting you back to standard way of uploading attachments. (Technical Details : "+err+")");
                        window.location.href = '/p/attach/NoteAttach?pid='+recordNewid+'&parentname='+recordname+'&retURL=%2F'+recordNewid;
                    }    
            });
        }
            
    
        </script>
        <apex:outputPanel id="relatedListOP">
            <apex:pageBlock title="Existing Attachments">
                <center>
                    <apex:commandButton style="font-weight-bold;" action="{!cancel}" value="Back to {!recordtype} - {!recordname}" id="theButton" />
                </center>
                <br/>
                <apex:pageBlockTable value="{!attachments}" var="attch" rendered="{!NOT(ISNULL(attachments))}">
                    <apex:column headerValue="Attachments Name">
                        <a href="/{!attch.Id}" target="_blank">{!attch.Name}</a>
                    </apex:column>
                   
                    <apex:column value="{!attch.BodyLength}" headerValue="Size (in Bytes)"/>
                    <apex:column value="{!attch.CreatedDate}"/>
                    <apex:column value="{!attch.LastModifiedDate}"/>
                    <apex:column value="{!attch.CreatedById}"/>
                    <apex:column value="{!attch.IsPrivate}"/>
                    <apex:column headerValue="View File">
                        <a href="/servlet/servlet.FileDownload?file={!attch.Id}" target="_blank">View File</a>
                    </apex:column>                    
                </apex:pageBlockTable>
            </apex:pageBlock>
        </apex:outputPanel>       
    </apex:form>  


    
  --> 
</apex:component>