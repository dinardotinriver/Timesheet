<apex:page title="Upload Content " controller="DragDropAttach.AttachContent">
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
    </script>
    <script src="/soap/ajax/33.0/connection.js" type="text/javascript"></script>
    
    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__JqueryNew, 'js/jquery.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__JqueryNew, 'js/jquery-ui.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DragDropAttach__JqueryNew, 'js/jquery.easy-confirm-dialog.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropAttach__JqueryNew, 'css/FileUploadCSS.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragDropAttach__JqueryNew, 'css/ui-lightness/jquery-ui-1.8.18.custom.css')}"/>
    
    <script type="text/javascript">
       
        var j$ = jQuery.noConflict();
        var count =0;
        var files;
        var currentFile;
        var $upload;
        var uploadCounter = 0;
        var progressCounter = 0;
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';
        var cancelPerformed = false;
        j$(window).load(function(){    
            j$('#browseArea').click(function(){
                j$('#file-input').trigger('click');
            });
            j$("#drop_zone").bind('dragover',function() {  
                j$('#drop_zone').css('border','2px dashed #3385E2').css('color','#3385E2'); }).bind('dragleave', function() { j$('#drop_zone').css('border','2px dashed #ccc').css('color','#ccc'); 
            });  
        });
        //Executes when start Upload button is selected
        function prepareFileUploads(evt){
            //Initialize variables 
            files = null;
            currentFile = null;
            count=0;
            uploadCounter = 0;
            progressCounter = 0;
            evt.preventDefault();
            //Get the file(s) from the input field
            files = evt.dataTransfer.files; // FileList object.
            j$('#drop_zone').css('border','2px dashed #ccc').css('color','#ccc');
            uploadFiles();
       }
       function uploadFiles() {
           if(document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value =='') {
                alert('Please select Library before drag, drop files');
                return;
            }
            j$('.uploadBox').show();
            //Only proceed if there are files selected
            if(files.length == 0){
                alert('Please select a file!');
                return; //end function
            }
    
            //Build out the upload divs for each file selected
            var uploadMarkup = '';
            for(i = 0; i < files.length; i++){
                //Determine file display size
                if(files[i].size < 1000000){
                    var displaySize = Math.floor(files[i].size/1000) + 'K';
                }else{
                    var displaySize  = Math.round((files[i].size / 1000000)*10)/10 + 'MB';
                }
                
               
                //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
                uploadMarkup += '<span style="width:550px;display:inline-block;">';
                uploadMarkup += '<img class="statusbar img'+i+'" style="height: 16px;width: 16px;margin-right: 6px;" src="{!URLFOR($Resource.DragDropAttach__jquery, 'uploading.gif')}" />';   
                uploadMarkup += '<span class="fileName"><span class="name name'+i+'">'+ files[i].name + '</span> ('+ displaySize+ ')</span>';
                uploadMarkup += '<span class="percentComplete percentComplete'+i+'">Pending</span></span>';
                uploadMarkup += '</span>';
                uploadMarkup += '<div class="clear"/>';
                uploadMarkup += '</div>';
                
    
                
            }
            //Empty earlier contents
            j$('.uploadBox').html('');
            //Add markup to the upload box
            j$('.uploadBox').append(uploadMarkup);
            j$('.uploadBox').dialog({
                autoOpen: false,
                draggable: false,
                modal: true,
                resizable: false,
                width: 590,
                height: 300,
                buttons:{"Cancel Remaining Uploads": function(){},"Done":function(){j$(this).dialog("close" );refreshContentTable(document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value);}},
                open: function(event, ui) { jQuery('.ui-dialog-titlebar-close').hide(); }
            });
    
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).easyconfirm();
            j$('.uploadBox').dialog('open');
            j$(".ui-dialog-title").html('Upload Content to "'+document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value+'" Library');
    
            //Once elements have been added to the page representing the uploads, start the actual upload process
            
            checkForUploads();
        }
        function callUploadFile()
        {
            //Initialize variables 
            files = null;
            currentFile = null;
            count=0;
            uploadCounter = 0;
            progressCounter = 0;
            var input = document.getElementById("file-input");
            files = input.files; // File array.
            uploadFiles();
        }
        function processCurrentFile(){
           
            var reader = new FileReader();

            // Keep a reference to the File in the FileReader so it can be accessed in callbacks
            reader.file = currentFile;

            reader.onload = function(e)
            {
                if(e.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                    var content = new sforce.SObject("ContentVersion");
                    content.Title = this.file.name;
                    content.PathOnClient = '/'+this.file.name;
                    content.FirstPublishLocationId = document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value;
                    j$('.percentComplete'+count).html('<font style="color:#00DA40;">Uploading...</font>');
                    var binary = "";
                    var bytes = new Uint8Array(e.target.result);
                    var length = bytes.byteLength;
    
                    for (var i = 0; i < length; i++)
                    {
                        binary += String.fromCharCode(bytes[i]);
                    }
    
                    content.versionData = (new sforce.Base64Binary(binary)).toString();
                    $upload.attr('data-status','complete');
                    if(files != null){
                        sforce.connection.create([content],
                        {
                            onSuccess : function(result, source)
                            {
                                if (result[0].getBoolean("success"))
                                {
                                     j$('.name'+progressCounter).html('<a href="' + VIEW_URL + result[0].id + '" target="_blank">'+ currentFile.name +'</a>');
                                     
                                     j$('.img'+progressCounter).hide();
                                     
                                     j$('.percentComplete'+progressCounter).html('<font style="color:#008040;">Done</font>');
                                     
                                     //call method which will upload next file if its available
                                     if(cancelPerformed){
                                        j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).removeAttr('disabled');    
                                     }
                                     console.log("new content version created with id " + result[0]);
                                }
                                else
                                {
                                     j$('.img'+progressCounter).hide();
                                     j$('.percentComplete'+progressCounter).html('<font style="color:#008040;">Error</font>');
                                     console.log("failed to create content version" + result[0]);
                                }
                                if(files != null && progressCounter<files.length)
                                    callUpload();
                            },
                            onFailure : function(error, source)
                            {
                                console.log("an error has occurred " + error);
                            }
                        });
                    }
                }
                else{
                    //If script is here something broke on the JavasSript remoting call
                    //Add classes to reflect error  
                    $upload.attr('data-status','complete');
                    
                    if (e.message=='String length exceeds maximum: 6000000'){
                        $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : File is too large</font>');
                    }
                    
                    else if (e.message.match("STORAGE_LIMIT_EXCEEDED")){
                        $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : STORAGE_LIMIT_EXCEEDED</font>');
                    }
                    
                    else {
                        $upload.find('.percentComplete'+count).html('<font style="color:#FF0000;">Error : '+e.message+'</font>');
                    }
                }
            };
            reader.readAsArrayBuffer(currentFile);
            
        }
        function checkForUploads(){
            //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
            $upload = j$(".upload:first[data-status='pending']");
            if(uploadCounter<files.length){
                currentFile = files[uploadCounter];
                if(uploadCounter==(files.length-1)){
                    j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).attr('disabled','disabled');   
                }
                if(currentFile.size <= 25000000){
                    processCurrentFile();
    
                }
                else {
                    console.log(uploadCounter);
                    $upload.find('.img'+uploadCounter).hide();
                    $upload.attr('data-status','complete');
                    $upload.find('.percentComplete'+uploadCounter).html('<font style="color:#FF0000;">Error : File is too large</font>');
                    callUpload();
                }
            }
            else{
                console.log("All Files has been uploaded Successfully");
                 performUploadCompleteActions();
            }
        }
        function callUpload(){
             //update the count variable 
            count++;
            progressCounter++;
            uploadCounter++;
            if(files != null)
                checkForUploads();  
        }
        function performUploadCompleteActions(){
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
            console.log('******** Upload');
            refreshContentTable(document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value);
        }
        function performUploadCancelActions(){
            files = null;
            j$(".upload[data-status='pending']").find('.percentComplete').html('<font style="color:#C00000;;">Canceled</font>');
            j$(".upload[data-status='pending']").find('.statusbar').hide();
            j$(".upload[data-status='pending']").attr('data-status','complete');
            
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[0]).hide();
            j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).show();
            var countElements = j$(".percentComplete:contains('Uploading...')").length;
            if(countElements == 1){
                j$(j$('.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-text-only')[1]).attr('disabled','disabled');  
                cancelPerformed = true; 
            }
            refreshContentTable(document.getElementById('j_id0:frm:pb:pbs:pbsi:libraryId').value);
        }
    </script>
    <script type="text/javascript">
        function dragenter(e) {
            count =0;
            e.stopPropagation();
            e.preventDefault();
        }
        function handleDragOver(evt){
            //alert(evt);
            evt.stopPropagation();
            evt.preventDefault();
            evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        }
        if(!window.FileReader) {
            alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application.");
            //window.location.href = '/p/attach/NoteAttach?pid='+recordid+'&parentname='+recordname+'&retURL=%2F'+recordid;
        }
        else { 
            j$(document).ready(function(){
                try{ 
                    var dropZone = document.getElementById('drop_zone');
                    dropZone.addEventListener('dragenter', dragenter, false);
                    dropZone.addEventListener("dragover", handleDragOver, false);
                    dropZone.addEventListener('drop', prepareFileUploads, false);
                    }
                     catch(err) {
                        alert("This browser doesn't support Drag & Drop of Files. Please try using Google Chrome or Mozilla Firefox to use this application. (Technical Details : "+err+")");
                        //window.location.href = '/p/attach/NoteAttach?pid='+recordNewid+'&parentname='+recordname+'&retURL=%2F'+recordNewid;
                    }    
            });
        }
            
    
    </script>
    
    <style>
        .bPageBlock .pbTitle {
            width:100%;
        }
        .ui-widget {
            z-index : 9999;
        }
        #drop_zone {
             border : 2px dashed #ccc;
             color : #ccc;
        }
    </style>
    <apex:form id="frm">
    <apex:actionFunction name="refreshContentTable" status="status" action="{!uploadComplete}" immediate="true" rerender="relatedListOP">
        <apex:param name="libraryId" assignTo="{!selectedlibraryId}" value="" />
    </apex:actionFunction>
        <apex:pageBlock rendered="{!!isContentEnabled}">
            <p>To use 'Upload Contents', you will need access to the Salesforce CRM Content feature. Please contact your system administrator requesting 'Salesforce CRM Content User' permission.</p>
        </apex:pageBlock>
        <apex:pageMessages id="pageMessages"></apex:pageMessages>
        <apex:outputPanel rendered="{!isContentEnabled}" id="op">
            <apex:pageBlock title="Step1 :" id="pb">
                <apex:pageBlockSection columns="1" id="pbs">
                    <apex:pageBlockSectionItem id="pbsi">
                        <apex:outputLabel value="Select Library"></apex:outputLabel>
                        <apex:selectList value="{!libraryId}" onChange="refreshContentTable(this.value);" size="1" style="width:200px;" id="libraryId">
                            <apex:selectoptions value="{!libraryList}"/>
                        </apex:selectList>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
                
                <apex:actionStatus id="status">&nbsp;
                    <apex:facet name="start" >
                        <img class="waitingImage" src="/img/loading.gif" title="Loading..." />
                    </apex:facet>
                </apex:actionStatus><br/>           
            </apex:pageBlock>
            
            <apex:pageBlock title="Step 2 : Drag & Drop Files">
                <!-- <a style="display: block;" href="#" id="drop_zone">Drag and Drop files into this outlined area to attach</a> -->
                <div class="dropbox">
                    <div id="drop_zone">Drag and Drop files into this outlined area or click to <span id="browseArea" style="color:#3385E2;cursor:pointer;"> browse file </span></div>
                    <input multiple="true" onchange="callUploadFile();" id="file-input" type="file" style="display:none;"/>
                    <div class="uploadBox"></div><br/>    
                </div>       
            </apex:pageBlock>    
        </apex:outputPanel>
        <apex:outputPanel id="relatedListOP">
            <apex:pageBlock title="Existing Content">
                <apex:pageBlockTable value="{!contents}" var="c" rendered="{!NOT(ISNULL(contents))}">
                    <apex:column headerValue="Content Title">
                        
                        <apex:outputLink target="blank" value="{!$Setup.Configuration__c.Community_Url__c}/sfc/#version/{!c.Id}" 
                        rendered="{!NOT(isAdminUser)}" >
                        {!c.Title}
                        </apex:outputLink>
                        <apex:outputLink target="blank" value="/sfc/#version/{!c.Id}" rendered="{!isAdminUser}" >
                        {!c.Title}
                        </apex:outputLink>
                    </apex:column>
                    <apex:column headerValue="Library">
                        <apex:outputText rendered="{!c.FirstPublishLocationId==$User.Id}">
                            My Personal Library
                        </apex:outputText>
                        <apex:outputPanel rendered="{!c.FirstPublishLocationId!=$User.Id}">
                            <a href="/sfc/#workspaceView?selectedWorkspaceId={!c.FirstPublishLocationId}" target="_blank">{!c.FirstPublishLocation.Name}</a>
                        </apex:outputPanel>                
                    </apex:column>
                    <apex:column value="{!c.ContentSize}" headerValue="Size (in Bytes)"/>
                    <apex:column value="{!c.CreatedDate}"/>
                    <apex:column value="{!c.CreatedById}"/>                
               </apex:pageBlockTable>
            </apex:pageBlock>
        </apex:outputPanel>
    </apex:form>       
</apex:page>